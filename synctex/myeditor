#!/bin/sh
#
# This is a script that starts a vim session within tmux. If desired, the
# script can open the vim session in a new urxvt window.
#
# Place this script in the root of your report/latex directory along with your
# makefile.
#
# Add the following code to your makefile and you can then type 'make sopen' to
# open both pdf reader and a vim session to edit the source files
# ---------------------------------------------------------------------
#  MAIN=main
#  SYNCTEX_PDFREADER=evince-sync
#
#  sopen: $(MAIN).pdf
#	  @echo ""
#	  @echo "Opening $(MAIN).pdf"
#	  ./myeditor $(MAIN).pdf 1
#	  screen -d -m ${SYNCTEX_PDFREADER} $(MAIN).pdf
# ---------------------------------------------------------------------
#
# 
# Backward search (PDFREADER --> EDITOR)
#  Ctrl+leftclick on a word in the pdf file
#
# Forward search (EDITOR --> PDFREADER)
#  type \ls in a source file in vim
#

print_usage() {
    SCRIPT_NAME=$0

    echo ""
    echo "Usage:"
    echo " $SCRIPT_NAME <pdf file>" >&2
    echo " $SCRIPT_NAME <pdf file> <run vim in tmux>" >&2
    echo " $SCRIPT_NAME <pdf file> <run vim in tmux> <open in new terminal>" >&2
    echo ""
    echo "Example usage:"
    echo " $SCRIPT_NAME main.pdf       <-- start new vim session"
    echo " $SCRIPT_NAME main.pdf 1     <-- start new vim session in tmux"
    echo " $SCRIPT_NAME main.pdf 1 1   <-- start new vim session in tmux within new terminal"
}

is_installed() {
    PROGRAM=$1       # Program name
    WARNING_ONLY=$2  # 1 for warning only; 0 will exit if program is missing

    command -v $PROGRAM >/dev/null 2>&1
    if [ "$?" -eq 1 ] ; then
        echo "$1 is not installed." >&2

        if [ "$WARNING_ONLY" -eq 0 ] ; then
            exit 1
        fi

        return 0
    fi
    return 1
}

# Confirm that the pdf file actually exists and is not a directory
validate_file() {
    FILE=$1

    if [ ! -f "$FILE" ] ; then
        echo "Error - The file '$FILE' does not exist." >&2
        exit 1
    fi
}


invoke_vim() {
    PDF_FILE=$1

    # Get absolute path to the PDF file
    PDF_FILE=$(readlink -f "$PDF_FILE")

    validate_file $PDF_FILE

    # Session name is given by the name of the PDF file
    SESSION_NAME=$(basename $PDF_FILE .pdf)

    # Confirm that vim is installed
    is_installed vim 0

    # Check if a vim session with the given name is already running
    vim --serverlist | grep -iq "^$SESSION_NAME$" 2>/dev/null
    if [ "$?" -ne 1 ] ; then
        echo "VIM session is already running" >&2
        exit 1
    fi

    # Invoke vim
    TERM=rxvt-unicode-256color vim --servername $SESSION_NAME -c "let g:mainfile='$PDF_FILE'"
}

invoke_tmux() {
    SCRIPT=$0
    PDF_FILE=$1

    # Get absolute path to the PDF file
    PDF_FILE=$(readlink -f "$PDF_FILE")

    validate_file $PDF_FILE

    # Session name is given by the name of the PDF file
    SESSION_NAME=$(basename $PDF_FILE .pdf)


    # Check if tmux is installed
    is_installed tmux 1
    if [ "$?" -eq 0 ] ; then
        # tmux isn't installed
        return 1
    fi

    # Check if a tmux session with the given name is already running
    tmux has-session -t $SESSION_NAME 2>/dev/null

    if [ "$?" -eq 1 ] ; then
        #echo "Starting VIM in TMUX session"
        tmux new-session -s $SESSION_NAME "$SCRIPT $PDF_FILE"
    else
        echo "TMUX session by name '$SESSION_NAME' already exists." >&2
        echo "Starting VIM outside TMUX session"
        $SCRIPT $PDF_FILE
    fi
}


# Evaluate input arguments
if [ "$#" -eq 3 ] ; then

    if [ "$3" -eq 1 ] ; then
        # Terminal emulator - changing terminal emulator may require you to change
        # the flag -e to something else
        TERMINAL="urxvt"

        # Open new terminal window and call the script itself again
        $TERMINAL -e $0 $1 $2 &
    else
        $0 $1 $2
    fi
    exit 0

elif [ "$#" -eq 2 ] ; then

    if [ "$2" -eq 1 ] ; then
        invoke_tmux $1
    else
        $0 $1
    fi
    exit 0

elif [ "$#" -eq 1 ] ; then
    invoke_vim $1
    exit 0

else
    print_usage
    exit 1
fi

